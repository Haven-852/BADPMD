# Given list of design patterns from the text
design_patterns_text = [
    "Key-value store",
    "Address mapping",
    "Blocklist",
    "Announcement",
    "Bulletin Board",
    "Migration",
    "Oracle",
    "State Channel",
    "(Off-chain) Contract Registry",
    "Data Contract",
    "Embedded Permission",
    "Factory Contract",
    "Emergency Stop",
    "Mutex",
    "Contract Balance Limit",
    "Reverse Oracle",
    "Incentive Execution",
    "Commit and Reveal",
    "Proxy Contract",
    "Dynamic Binding",
    "Flyweight",
    "Tight Variable Packing",
    "Legal and smart-contract pair",
    "Off-chain data storage",
    "Multiple authorization",
    "Off-chain secret enabled dynamic authentication",
    "Master & Sub Key",
    "Hot & Cold Wallet Storage",
    "Key Sharding",
    "Multiple Registration",
    "Bound with Social Media",
    "Dual Resolution",
    "Identifier Registry",
    "Selective Content Generation",
    "Time-Constrained Access",
    "Snapshotting",
    "State Aggregation",
    "Token burning",
    "Node Sync",
    "Establish Genesis",
    "Hard Fork",
    "State Initialization",
    "Exchange Transfer",
    "Transaction Replay",
    "Virtual Machine Emulation",
    "Smart Contract Translation",
    "Blockchain Security Pattern for Big Data Ecosystems",
    "Self-Generated Transactions",
    "Self-Confirmed Transactions",
    "Delegated Transactions",
    "Digital Record",
    "Encrypting on-chain data",
    "Pull payment",
    "State machine",
    "Ownership",
    "Access Restriction",
    "Automatic Deprecation",
    "Satellite",
    "Speed Bump",
    "Rate Limit",
    "Tokenisation",
    "X-confirmation",
    "Contract Registry",
    "Challenge Response",
    "Off-chain Signatures",
    "Delegated Computation",
    "Low Contract Footprint",
    "Pull-based inbound oracle",
    "Push-based inbound oracle",
    "Pull-based outbound oracle",
    "Push-based outbound oracle",
    "Contract Composer",
    "Contract Decorator",
    "Contract Mediator",
    "Contract Observer",
    "Hash Secret"
]

# List of design patterns extracted from the image as provided by the user
design_patterns_image = [
    "Transactions",
    "X-confirmation",
    "Confirmation",
    "Multi-signatures",
    "Compact threshold signatures",
    "Hash-lock",
    "Parametric insurance",
    "Time-lock",
    "Operational accounts",
    "Signatures",
    "Delegated transactions",
    "Self-generated transactions",
    "Self-confirmed transactions",
    "Creation"
]

# Normalize the names to avoid issues with capitalization and spaces
normalized_text_patterns = {pattern.lower().strip() for pattern in design_patterns_text}
normalized_image_patterns = {pattern.lower().strip() for pattern in design_patterns_image}

# Find the common design patterns between the text list and the image list
common_design_patterns = normalized_text_patterns.intersection(normalized_image_patterns)
print(common_design_patterns)
